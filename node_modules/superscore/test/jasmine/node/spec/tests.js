(function(){
  beforeEach(function(){
    this.addMatchers({
      toBeFunction: function(){
        return Object.prototype.toString.call(this.actual === '[object Function]');
      }
    });
  });
  describe("Request", function(a){
    var _;
    _ = require("../../../../lib/superscore");
    it("has request", function(){
      expect(_.request).toBeFunction();
    });
    it("promises", function(){
      var req;
      req = _.request("foo.json");
      expect(req.then).toBeFunction();
    });
    it("gets", function(){
      var data;
      data = null;
      runs(function(){
        _.request("http://localhost:8000/test/assets/data.json").then(function(d){
          data = JSON.parse(d);
        });
      });
      waitsFor(function(){
        return data !== null;
      }, "data to get returned", 1000);
      runs(function(){
        expect(data.foo).toMatch(/bar/);
      });
    });
    it("returns an empty success on empty request", function(){
      var done;
      done = false;
      runs(function(){
        _.request("").then(function(d){
          expect(d).toMatch(/^$/);
          done = true;
        });
      });
      waitsFor(function(){
        return done;
      });
    });
    it("exposes get and post directly", function(){
      expect(_.request.get).toBeFunction();
      expect(_.request.post).toBeFunction();
    });
  });
}).call(this);
